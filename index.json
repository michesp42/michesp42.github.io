[{"categories":["tutorials"],"content":"There are many ways to manage dotfiles in Linux and other Unix-like operating systems; you can do it manually, for example, using shell scripts and even makefiles, or you can use dedicated tools like stow and yadm. Another common way people do it though is using git bare repositories and it is the method of tracking dotfiles that I ultimately chose upon considering the alternatives. When you use git normally you have a repository that contains a .git folder meanwhile when you initialize a directory as a git bare repository it becomes the .git folder itself and you will have to track files that are outside of it, which is perfect for tracking dotfiles that are all scattered all around in your home directory. In the following sections I will show how to set up a bare repository with some additional git configurations especially if you wanna add a README and LICENSE for your repository but don’t want them to cluttering up your home directory. ","date":"2022-10-14","objectID":"/posts/how-i-track-my-dotfiles/:0:0","tags":["linux","dotfiles","git"],"title":"How to Set Up a Git Bare Repository to Track Dotfiles","uri":"/posts/how-i-track-my-dotfiles/"},{"categories":["tutorials"],"content":"Step 1: Initialize repository The first thing we need to do is create a directory and initialize it as a git bare repository. In my case, I usually create a ~/.local/dotfiles/ folder and use it as the bare repository however you can use any sensible directory you want. mkdir --parent ~/.local/dotfiles/ cd ~/.local/dotfiles git init --bare Now we have a bare repository and if you list out its contents it will look something like this $ ls -F ~/.local/dotfiles/ branches/ config HEAD index logs/ ORIG_HEAD COMMIT_EDITMSG description hooks/ info/ objects/ refs/ which confirms that it really is just like a .git directory. ","date":"2022-10-14","objectID":"/posts/how-i-track-my-dotfiles/:1:0","tags":["linux","dotfiles","git"],"title":"How to Set Up a Git Bare Repository to Track Dotfiles","uri":"/posts/how-i-track-my-dotfiles/"},{"categories":["tutorials"],"content":"Step 2: Add alias For git to know when we want to work with our dotfiles wherever in the filesystem we have to specify a couple of flags, namely --git-dir that is used to set the path to the repository and, for our purposes, this should point to the dotfiles folder we set above --work-tree that is used to set the working tree which we’ll set to be the home directory. And so we’ll have to run something like the following to manage our dotfiles. git --git-dir=\"$HOME\"/.local/dotfiles --work-tree=\"$HOME\" ... This would be a hassle to type all the time so we might as well add an alias for it in our login shell’s configuration file, e.g., the ~/.bashrc file. In this case I’m calling it dots but it can be anything you prefer. alias dots='/usr/bin/git --git-dir=\"$HOME\"/.local/dotfiles --work-tree=\"$HOME\"' ","date":"2022-10-14","objectID":"/posts/how-i-track-my-dotfiles/:2:0","tags":["linux","dotfiles","git"],"title":"How to Set Up a Git Bare Repository to Track Dotfiles","uri":"/posts/how-i-track-my-dotfiles/"},{"categories":["tutorials"],"content":"Step 3: Additional configuration ","date":"2022-10-14","objectID":"/posts/how-i-track-my-dotfiles/:3:0","tags":["linux","dotfiles","git"],"title":"How to Set Up a Git Bare Repository to Track Dotfiles","uri":"/posts/how-i-track-my-dotfiles/"},{"categories":["tutorials"],"content":"Ignore untracked files By default, running git status will show all untracked files in the working tree. We don’t want this for the the dots alias since we are only interested in the dotfiles we are tracking and not all the other files in our home directory so we have to add the following configuration for the bare repository. dots config --local status.showUntrackedFiles no ","date":"2022-10-14","objectID":"/posts/how-i-track-my-dotfiles/:3:1","tags":["linux","dotfiles","git"],"title":"How to Set Up a Git Bare Repository to Track Dotfiles","uri":"/posts/how-i-track-my-dotfiles/"},{"categories":["tutorials"],"content":"Remove README and LICENSE from $HOME, sort of Note This step is not essential for setting up a bare repo but might worth doing for a cleaner home directory. If have a README and LICENSE file for your dotfiles repository but you want to get rid of them from the listings of your home directory then you will have to use git sparse-checkout. We first to enable the sparse-checkout feature and then set README and LICENSE to be ignored when we sparse-checkout. dots config core.sparseCheckout true dots sparse-checkout set '/*' '!README' '!LICENSE' The README and LICENSE will now disappear from the home directory but they still exist and are tracked by git just not appearing in the working tree. ","date":"2022-10-14","objectID":"/posts/how-i-track-my-dotfiles/:3:2","tags":["linux","dotfiles","git"],"title":"How to Set Up a Git Bare Repository to Track Dotfiles","uri":"/posts/how-i-track-my-dotfiles/"},{"categories":["tutorials"],"content":"Step 4: Manage the dotfiles Now we can use the dots alias like a normal git command to manage dotfiles from anywhere in the filesystem. dots add ~/.bashrc dots commit -m 'add bashrc' dots push -u origin main ","date":"2022-10-14","objectID":"/posts/how-i-track-my-dotfiles/:4:0","tags":["linux","dotfiles","git"],"title":"How to Set Up a Git Bare Repository to Track Dotfiles","uri":"/posts/how-i-track-my-dotfiles/"}]