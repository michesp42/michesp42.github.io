[{"categories":null,"content":" Warning This is still just a test blog (really the README of my dotfiles repo) published for my restarting of this website. ","date":"2022-10-14","objectID":"/posts/how-i-setup-my-dotfiles/:0:0","tags":null,"title":"How I Setup My Dotfiles","uri":"/posts/how-i-setup-my-dotfiles/"},{"categories":null,"content":"Local dotfiles These dotfiles are tracked using a git bare repository and need these scripts to work properly. ","date":"2022-10-14","objectID":"/posts/how-i-setup-my-dotfiles/:1:0","tags":null,"title":"How I Setup My Dotfiles","uri":"/posts/how-i-setup-my-dotfiles/"},{"categories":null,"content":"Set up for git bare repo These are the steps for setting up this git bare repository in case I forget (which I probably will). ","date":"2022-10-14","objectID":"/posts/how-i-setup-my-dotfiles/:2:0","tags":null,"title":"How I Setup My Dotfiles","uri":"/posts/how-i-setup-my-dotfiles/"},{"categories":null,"content":"Step 1: Initialize repository Create and initialize the git bare repository with the following commands. mkdir --parent ~/.local/dotfiles/ cd ~/.local/dotfiles git init --bare The directory ~/.local/dotfiles can be replaced with any sensible directory you prefer. ","date":"2022-10-14","objectID":"/posts/how-i-setup-my-dotfiles/:2:1","tags":null,"title":"How I Setup My Dotfiles","uri":"/posts/how-i-setup-my-dotfiles/"},{"categories":null,"content":"Step 2: Add alias For git to know when we want to work with our dotfiles we have to specify a couple of flags, namely --git-dir and --work-tree. This would be a hassle to type all the time so we might as well add an alias for it in our ~/.bashrc. In this case I’m calling it dots but it can be anything you prefer. alias dots='/usr/bin/git --git-dir=\"$HOME\"/.local/dotfiles --work-tree=\"$HOME\"' ","date":"2022-10-14","objectID":"/posts/how-i-setup-my-dotfiles/:2:2","tags":null,"title":"How I Setup My Dotfiles","uri":"/posts/how-i-setup-my-dotfiles/"},{"categories":null,"content":"Step 3: Additional configuration Ignore untracked files By default, running git status will show all untracked files in the work tree. We don’t want to have this for the the dots alias since we are only interested in the dotfiles we are tracking and not all the other files in our home directory so we have to add the following configuration for the bare repository. dots config --local status.showUntrackedFiles no Remove README and UNLICENSE from $HOME, sort of The README and UNLICENSE are located in the root of the dotfiles repository so that when they are pushed to the remote repository they will be recognized and rendered/processed(?) by gitlab and github. However, I don’t want to keep seeing them in my home directory. I would have just put them somewhere else if it was that simple but this seems not to be the case based on the discussion in this issue. Luckily, I found a solution from the same link and that is git sparse-checkout. I just have to run the following. dots config core.sparseCheckout true dots sparse-checkout set '/*' '!README.org' '!UNLICENSE' The commands above are explained here and here. ","date":"2022-10-14","objectID":"/posts/how-i-setup-my-dotfiles/:2:3","tags":null,"title":"How I Setup My Dotfiles","uri":"/posts/how-i-setup-my-dotfiles/"},{"categories":null,"content":"Step 4: Manage the dotfiles Now we can use the dots alias like a normal git command to manage dotfiles. ","date":"2022-10-14","objectID":"/posts/how-i-setup-my-dotfiles/:2:4","tags":null,"title":"How I Setup My Dotfiles","uri":"/posts/how-i-setup-my-dotfiles/"}]